#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    // backtracking solver
    void solve(int col, vector<string>& board, vector<vector<string>> &ans,
               vector<int> &leftRow, vector<int> &upperDiagonal,
               vector<int> &lowerDiagonal, int n) {
        
        if (col == n) {
            ans.push_back(board);
            return;
        }
        
        for (int row = 0; row < n; row++) {
            if (leftRow[row] == 0 && upperDiagonal[n - 1 + col - row] == 0 && lowerDiagonal[row + col] == 0) {
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiagonal[row + col] = 1;
                upperDiagonal[n - 1 + col - row] = 1;

                solve(col + 1, board, ans, leftRow, upperDiagonal, lowerDiagonal, n);

                // backtrack
                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiagonal[row + col] = 0;
                upperDiagonal[n - 1 + col - row] = 0;
            }
        }
    }

    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n, string(n, '.'));
        
        vector<int> leftRow(n, 0), upperDiagonal(2 * n - 1, 0), lowerDiagonal(2 * n - 1, 0);
        
        solve(0, board, ans, leftRow, upperDiagonal, lowerDiagonal, n);
        return ans;
    }
};

int main() {
    int n;
    cout << "Enter the value of N: ";
    cin >> n;

    Solution obj;
    vector<vector<string>> solutions = obj.solveNQueens(n);

    if (solutions.size() > 0) {
        cout << "\nOne valid configuration:\n";
        for (string row : solutions[0]) {
            cout << row << endl;
        }
    } else {
        cout << "No solution exists for N = " << n << endl;
    }

    cout << "\nTotal number of distinct solutions = " << solutions.size() << endl;

    return 0;
}
